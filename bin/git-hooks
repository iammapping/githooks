#!/usr/bin/env node

/**
 * The command line interface for githooks
 */

var program = require('commander'),
	fs = require('fs'),
	path = require('path'),
	pkg = require('../package.json'),
	cfg = require('../config.js'),
	// working dir of the githooks 
	MY_ROOT_DIR = path.join(path.resolve(__dirname), '..'),
	// boot dir of the workspace
	BOOT_DIR,
	// dir of git 
	GIT_DIR,
	// dir of git hooks 
	GIT_HOOKS_DIR,
	// custom githooks config file
	GITHOOKS_CFG_FILE;

// setup options of program
program
	.version(pkg.version)
	.option('-w, --workspace <path>', 'set the boot directory of the workspace. defaults to the current')
	.option('-c, --config <path>', 'specify a .githooks')
	.option('-f, --force', 'force to do')
	.usage('<cmd> [hook]');

// setup usage tips of program
program.on('--help', function() {
	console.log('  Usage Examples:');
	console.log('');
	console.log('    Install a "pre-commit" hook:');
	console.log('    $ git-hooks install pre-commit');
	console.log('');
	console.log('    Remove a "pre-commit" hook:');
	console.log('    $ git-hooks remove pre-commit');
	console.log('');
	console.log('    Remove all hooks:');
	console.log('    $ git-hooks clean');
	console.log('');
	console.log('    List all hooks:');
	console.log('    $ git-hooks list');
	console.log('');
	console.log('  Note:');
	console.log('');
	console.log('    set a ".githooks" into your workspace, or use -c to specify one before installing githooks!');
	console.log('');
});

// exec parsing to get options
program.parse(process.argv);

/**
 * output error and exit immediately
 * @param  {Error|String} error 
 */
function errorHandler(error) {
	if (error) {
		console.error('');
		console.error('  ' + error.toString());
		console.error('');
		process.exit(cfg.ERROR_EXIT);
	}
}

/**
 * check the path is a directory
 * @param  {String}  path
 * @return {Boolean}
 */
function isDir(path) {
	return fs.existsSync(path) && fs.statSync(path).isDirectory();
}

/**
 * ask a closed question
 * answer with yes or no
 * @param  {String} question
 * @param  {Function} callback while yes
 * @param  {Function} callback while no
 */
function prompt(question, yes, no) {
	process.stdin.resume();
	process.stdin.setEncoding('utf8');
	process.stdout.write(question + '(y/n) ');
	process.stdin.once('data', function (answer) {
		process.stdin.pause();

		if (answer.trim().match(/^y(es)?$/i)) {
			yes && yes();
		} else {
			no && no();
		}
	});
}


/**
 * init the workspace const
 */
(function setWorkspace() {
	if (program.workspace && isDir(program.workspace)) {
		BOOT_DIR = path.resolve(program.workspace);
	} else {
		// get the current working directory of the process
		BOOT_DIR = process.cwd();
	}

	GIT_DIR = path.join(BOOT_DIR, '.git');
	GIT_HOOKS_DIR = path.join(GIT_DIR, 'hooks');

	GITHOOKS_CFG_FILE = program.config 
		? path.resolve(BOOT_DIR, program.config) 
		: path.join(BOOT_DIR, '.githooks');
})();

/**
 * does the project use git?
 * check .git exists 
 */
(function checkGit() {
	if (!isDir(GIT_DIR)) {
		errorHandler(new Error('git not inited in your workspace'));
	}
})();

/**
 * check git hooks dir
 */
(function checkGitHooks() {
	if (!isDir(GIT_HOOKS_DIR)) {
		if (!program.force) {
			errorHandler(new Error('directory of git hooks not found. use -f to mkdir'));
		} else {
			// force to create
			console.log('force to create directory of git hooks(' + GIT_HOOKS_DIR + ')');
			try {
				fs.mkdirSync(GIT_HOOKS_DIR, '755');
			} catch(e) {
				console.log('retry with sudo');
				errorHandler(e);
			}
		}
	}
})();


// setup commands of program
program
	.command('configure')
	.description('configure your workspace')
	.option('-i, --init', 'init an empty ".githooks"')
	.option('-t, --test', 'test your ".githooks"')
	.action(function(opts) {
		if (opts.init) {
			initConfig();
		} 
		if (opts.test) {
			checkAndReturnHooks().forEach(function(hook) {
				console.log('checking ' + hook + '...ok');
			});
		}
	});

function initConfig() {
	if (!fs.existsSync(GITHOOKS_CFG_FILE)) {
		try {
			fs.writeFileSync(GITHOOKS_CFG_FILE, "module.exports = function(githooks) {\n\n};", {
				mode: '644'
			});
		} catch(e) {
			console.log('retry with sudo');
			errorHandler(e);
		}
	}
}

function checkAndReturnHooks() {
	if (!fs.existsSync(GITHOOKS_CFG_FILE)) {
		if (!program.config) {
			errorHandler(new Error('".githooks" not found in your workspace'));
		} else {
			errorHandler(new Error('the specified config "' + program.config + '" not found'));
		}
	}

	var githooks = require('../githooks.js');

	try {
		require(GITHOOKS_CFG_FILE)(githooks);
	} catch(e) {
		errorHandler(e);
	}

	return githooks.hooks();
}


program
	.command('install <hook>')
	.description('install a hook')
	.action(function(hook) {
		checkAndReturnHooks();

		if (cfg.AVAILABLE_HOOKS.indexOf(hook) < 0) {
			errorHandler(new Error('hook not support'));
		}

		if (exists(hook)) {
			if (!program.force) {
				errorHandler(new Error('hook exists. use -f to backup and overwrite'));
			}

			console.log('backuping ' + hook + ' to ' + hook + '.bak...');
			backup(hook, hook + '.bak');
		}

		console.log('installing ' + hook + '...');
		install(hook);
	});

function exists(hook) {
	return fs.existsSync(path.join(GIT_HOOKS_DIR, hook));
}

function backup(hook, back) {
	return fs.renameSync(path.join(GIT_HOOKS_DIR, hook), path.join(GIT_HOOKS_DIR, back));
}

function install(hook, done) {
	var hookTmpl = path.join(MY_ROOT_DIR, 'lib', 'git-hooks-template.js'),
		hookCode;

	hookCode = fs.readFileSync(hookTmpl, {'encoding': 'utf8'});
	hookCode = compile(hook, hookCode);
	try {
		fs.writeFileSync(path.join(GIT_HOOKS_DIR, hook), hookCode, {
			mode: '755'
		});
	} catch(e) {
		console.log('retry with sudo');
		errorHandler(e);
	} finally {
		done && done();
	}
}

function compile(hook, code) {
	var REG_LIB = /require\s*\(.*?githooks(\.js)?.*?\)/i,
		REG_CFG = /require\s*\(.*?\.githooks(\.js)?.*?\)/i;

	if (REG_LIB.test(code)) {
		// replace the relative githooks path 
		// to the lib absolute path
		code = code.replace(REG_LIB, 'require("' + path.resolve(MY_ROOT_DIR, 'githooks.js') + '")');
	} else {
		// throw error while githooks lib not imported
		errorHandler(new Error('the githooks lib(githooks.js) not required in the template'));
	}

	if (REG_CFG.test(code)) {
		// replace the relative GithooksFile path 
		// to the workspace's GithooksFile absolute path
		code = code.replace(REG_CFG, 'require("' + GITHOOKS_CFG_FILE + '")');
	} else {
		// throw error while githooks config not imported
		errorHandler(new Error('the githooks custom config(.githooks) not required in the template'));
	}

	code = code.replace("githooks('git-hook-name')", "githooks('" + hook + "')");
	
	code = '#!' + process.execPath
		+ '\n\n' 
		+ '// compiled by githooks at ' + new Date().toString()
		+ '\n\n'
		+ code;

	return code;
}


program
	.command('autoinstall')
	.description('auto install hooks based on your ".githooks" config')
	.action(function() {
		// get all available pending hooks
		var hooks = checkAndReturnHooks();

		// make sure installing in series
		var completed = 0;
		var iterate = function() {
			var hook = hooks[completed];
			if (exists(hook) && !program.force) {
				errorHandler(new Error('hook exists. use -f to overwrite'));
			}

			console.log('installing ' + hook + '...');
			install(hook, function() {
				completed++;
				if (completed < hooks.length) {
					iterate();
				}
			});
		}
		iterate();
	});


program
	.command('remove <hook>')
	.description('remove a hook')
	.action(function(hook) {
		if (!exists(hook)) {
			errorHandler(new Error('hook not found'));
		}

		console.log('removing ' + hook + '...');
		remove(hook);
	});

function remove(hook) {
	fs.unlinkSync(path.join(GIT_HOOKS_DIR, hook));
}


program
	.command('clean')
	.description('clean all hooks')
	.action(function() {
		prompt('Are you sure to remove all hooks?', function() {
			list().forEach(function(hook) {
				console.log('removing ' + hook + '...');
				remove(hook);
			});
		});
	});


program
	.command('list')
	.description('list all hooks')
	.action(function() {
		list().forEach(function(hook) {
			console.log(hook);
		})
	});

function list() {
	return fs.readdirSync(GIT_HOOKS_DIR).filter(function(hook) {
		return cfg.AVAILABLE_HOOKS.indexOf(hook) > -1;
	});
}


program
	.command('*')
	.action(function() {
		errorHandler(new Error('command not found'));
	});


// exec parsing to get commands
program.parse(process.argv);

// display help
if (program.args.length == 0) {
	console.log('');
	console.log('  ' + pkg.name + ' -- ' + pkg.description);
	console.log('  ————————————————————————————————————————');
	program.help();
}